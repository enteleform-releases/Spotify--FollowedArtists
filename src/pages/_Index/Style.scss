//###  Sass  ###//
@use "sass:math";
@use "sass:map";


//####################################################################################################################//
//##>  Variables                                                                                                    ##//
//####################################################################################################################//

	:root{
		--ElevationScale:                 2;
		--SurfaceElevation_OpacityFactor: 2.5;
		--TextElevation_OpacityFactor:    0.75;
	}


//####################################################################################################################//
//##>  Colors                                                                                                       ##//
//####################################################################################################################//

	$Mono_Settings: (
		"H_Min":220, "H_Max":220,
		"S_Min":10,  "S_Max":10,
		"L_Min":7,   "L_Max":90,
	);

	@function Color($percent, $settings){
		/* TODO: handle hue cycling > 360 */

		$H_Min: map.get($settings, "H_Min");
		$H_Max: map.get($settings, "H_Max");
		$S_Min: map.get($settings, "S_Min");
		$S_Max: map.get($settings, "S_Max");
		$L_Min: map.get($settings, "L_Min");
		$L_Max: map.get($settings, "L_Max");

		$H_Diff: ($H_Max - $H_Min);
		$S_Diff: ($S_Max - $S_Min);
		$L_Diff: ($L_Max - $L_Min);

		$H: (($H_Diff * math.div($percent, 100)) + $H_Min);
		$S: (($S_Diff * math.div($percent, 100)) + $S_Min);
		$L: (($L_Diff * math.div($percent, 100)) + $L_Min);

		@return "hsl(" + $H + ", " + $S + "%, "+ $L + "%)";
	}

	:root{
		--Mono_0:   #{Color(0,   $Mono_Settings)};
		--Mono_5:   #{Color(5,   $Mono_Settings)};
		--Mono_10:  #{Color(10,  $Mono_Settings)};
		--Mono_15:  #{Color(15,  $Mono_Settings)};
		--Mono_20:  #{Color(20,  $Mono_Settings)};
		--Mono_25:  #{Color(25,  $Mono_Settings)};
		--Mono_30:  #{Color(30,  $Mono_Settings)};
		--Mono_35:  #{Color(35,  $Mono_Settings)};
		--Mono_40:  #{Color(40,  $Mono_Settings)};
		--Mono_45:  #{Color(45,  $Mono_Settings)};
		--Mono_50:  #{Color(50,  $Mono_Settings)};
		--Mono_55:  #{Color(55,  $Mono_Settings)};
		--Mono_60:  #{Color(60,  $Mono_Settings)};
		--Mono_65:  #{Color(65,  $Mono_Settings)};
		--Mono_70:  #{Color(70,  $Mono_Settings)};
		--Mono_75:  #{Color(75,  $Mono_Settings)};
		--Mono_80:  #{Color(80,  $Mono_Settings)};
		--Mono_85:  #{Color(85,  $Mono_Settings)};
		--Mono_90:  #{Color(90,  $Mono_Settings)};
		--Mono_95:  #{Color(95,  $Mono_Settings)};
		--Mono_100: #{Color(100, $Mono_Settings)};
	}


//####################################################################################################################//
//##>  Styles                                                                                                       ##//
//####################################################################################################################//

	*,
	* *{
		user-select: none !important
	}

	.Hidden{
		display: none;
	}

	.DIVIDER{
		flex: 1;
	}

	html,
	body{
		width:  100%;
		height: 100%;
	}

	body{
		display:         flex;
		flex-direction:  column;
		align-items:     center;
		justify-content: center;
		background:      var(--Mono_5 );
		color:           var(--Mono_70);
	}

	body > :not(:is(:last-child, .DIVIDER)){
		margin-bottom: 2rem;
	}

	#Logo,
	#LogoBalancer{
		margin-top: 3rem;
	}

	#LogoBalancer{
		opacity: 0;
	}

	#Info{
		font-size:  1.5rem;
		text-align: center;;
	}

	#Download,
	#Retry{
		--Transition: 400ms;

		padding:       1rem 2rem;
		font-size:     3rem;
		background:    var(--Mono_20);
		color:         var(--Mono_80);
		border:        4px solid var(--Mono_40);
		border-radius: 4px;
		cursor:        pointer;
		filter:        brightness(1);
		transition:
			box-shadow var(--Transition) ease-in-out,
			filter     var(--Transition) ease-in-out,
			scale      var(--Transition) ease-in-out;

		&:hover {--ElevationScale:2;    --SurfaceElevation_OpacityFactor:5; --Transition:250ms; filter:brightness(1.1); scale:1.025;}
		&:active{--ElevationScale:0.75; --SurfaceElevation_OpacityFactor:7; --Transition:100ms; filter:brightness(1.2); scale:0.975;}
	}

	.ElevatedSurface{
		box-shadow:
			0  calc(1.5px * var(--ElevationScale))  calc(3px * var(--ElevationScale))  calc(-2px * var(--ElevationScale))  rgba(0, 0, 0, calc(0.24 * var(--SurfaceElevation_OpacityFactor))),
			0  calc(3px   * var(--ElevationScale))  calc(6px * var(--ElevationScale))  calc(0px  * var(--ElevationScale))  rgba(0, 0, 0, calc(0.16 * var(--SurfaceElevation_OpacityFactor))),
			0  calc(4.5px * var(--ElevationScale))  calc(9px * var(--ElevationScale))  calc(4px  * var(--ElevationScale))  rgba(0, 0, 0, calc(0.10 * var(--SurfaceElevation_OpacityFactor)));
	}

	.ElevatedText{
		text-shadow:
			0  calc(0.75px * var(--ElevationScale))  calc(1.5px * var(--ElevationScale))  rgba(0, 0, 0, calc(0.50 * var(--TextElevation_OpacityFactor))),
			0  calc(1.5px  * var(--ElevationScale))  calc(3px   * var(--ElevationScale))  rgba(0, 0, 0, calc(0.33 * var(--TextElevation_OpacityFactor))),
			0  calc(2.25px * var(--ElevationScale))  calc(4.5px * var(--ElevationScale))  rgba(0, 0, 0, calc(0.25 * var(--TextElevation_OpacityFactor)));
	}
